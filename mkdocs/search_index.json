{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to documentation of \nSWITCH-CASE\n.", 
            "title": "INTRODUCTION"
        }, 
        {
            "location": "/getting-started/INSTALLING SMING/", 
            "text": "INSTALLING SMING\n\n\n\n\n\n\nClone this repository\n\n\n\n\ngit clone --recursive https://github.com/kteza1/hng-switchboard.git\n\n\n\n\n\n\nSetup prebuilt \nesp-open-sdk\n\n\n\n\ncd ~/\ncurl -L -O https://bintray.com/artifact/download/kireevco/generic/esp-open-sdk-1.2-macos-x86_64.tar.gz\nsudo mkdir -p /opt/esp-open-sdk\nsudo tar -zxf esp-open-sdk-1.2-macos-x86_64.tar.gz -C /opt/esp-open-sdk\nsudo chmod -R 775 /opt/esp-open-sdk\n\n\n\n\n\n\nSetup \nspiffy\n\n\n\n\ncd spiffy\nmkdir build\nmake\nsudo cp build/spiffy /usr/bin/\nsudo chmod ugo+x /usr/bin/spiffy\n\n\n\n\n\n\nTest an example in \nSming\n with \nmake flash", 
            "title": "Installing Sming"
        }, 
        {
            "location": "/getting-started/ACCESSING SERIAL PORT/", 
            "text": "ACCESSING BOARD THROUGH SERIAL PORT\n\n\n\n\nMAC OSX YOSEMITE 10.10.4\n\n\n\n\n\n\nInstall \nUSB-Serial driver\n\n\n\n\n\n\nls /dev/tty.*\n -\n Now check if a new device is visible after plugging nodemcu. This is your device of interest\n\n\n\n\n\n\nscreen /dev/tty.foo\n\n\n\n\n\n\nFor an IDE, you can use \nESPlorer\n\n\n\n\n\n\nLINUX UBUNTU 14.04\n\n\n\n\nNo need to install any driver. Just follow steps 2 and 3 of mac osx section. ESPlorer seems to be not able to detect USB-Serial\n\n\n\n\nWINDOWS 8\n\n\n\n\nTo be updated", 
            "title": "Accessing Serial Port"
        }, 
        {
            "location": "/getting-started/VAGRANT_SETUP/", 
            "text": "SWITCH-CASE VAGRANT SETUP\n\n\n\n\n\n\nInstall \nvagrant\n, virtual box and get switch-case clone\n\n\n\n\ngit clone --recursive https://github.com/kteza1/switch-case\n\n\n\n\n\n\nDownload, start and ssh into box\n\n\n\n\ncd switch-case/Vagrant\nvagrant up\nvagrant ssh\n\n\n\n\nTROUBLESHOOT:\n\n\n\n\n[x] Unable to find \n/dev/ttyUSB0\n when esp is plugged in.\n\n\nDo \nlsusb\n in virtual machaing with and without esp plugged in. If don't see an extra interface when plugged in, make sure that you find usb-serial connection in your host machine when you do \nVBoxManage list usbhost\n and enter \nproduct id\n and \nvendor id\n in yml config file and do \nvagrant halt\n and \nvagrant up\n.\n\n\n\n\nOpen virtual box app and see if multiple virtual machines are running. Stop unnecessary running virtual machines\n\n\n\n\n\n\n[x] Unable to \nconnect\n to USB serial.\n\n\n\n\nDo \nesp-console 115200\n. If you see below message, some other resource is using the port\n\n\n\n\nSerialException: device reports readiness to read but returned no data (device disconnected?)\n\n\n\n\nVagrant Initial Setup\n\n\nNOTE: You don't need to follow these steps. These are used to create a vagrant box\n\n\nCREATING  A VAGRANT ENVIRONMENT\n\n\n* vagrant init ubuntu/trusty64  #creates vagrant config file\n* vagrant up                    #(downloads)boots the virtual machine. Do this where vagrant config file is present\n* vagrant ssh                                         #ssh into vagrant machine\n* vagrant halt                                        #shutdown the virtual machine\n* vagrant package --output package.box                #create a vagrant box of your env\n* vagrant box add --name kteza1/trusty64 package.box  #create virtual machine with a name from local box\n\n\n\n\n\nBUILDING ESP-OPEN-SDK\n\n\n\n\nuse ubuntu/trusty64 in vagrant file\n\n\nIncrease ram size during installation of esp-open-sdk\n\n\n\n\nconfig.vm.provider \nvirtualbox\n do |v|\n    v.memory = \n1024\n\nend\n\n\n\n\n\n\nFollow the instructions \nhere\n plus\n\n\n\n\n    sudo apt-get install unzip\n\n    # This package contains usbserial kernel drivers\n    # see http://ubuntu.5.x6.nabble.com/PATCH-0-2-linux-image-extra-support-td365008.html\n    sudo apt-get -y install linux-image-extra-virtual\n\n    # Give the vagrant user permissions for the serial ports\n    sudo adduser vagrant dialout\n\n\n\n\n\n\nSet RAM to \"256\" in step 2 and restart the virtal machine \n\n\n\n\nTROUBLESHOOT:\n\n\nFollow these only if there is a failure in build after following above steps\n\n\n\n\nAdd below extra repos to \n/etc/apt/sources.list\n  if you aren't able to install every dependecy in the above step\n\n\n\n\ndeb http://ftp.us.debian.org/debian/ jessie main\ndeb http://ftp.us.debian.org/debian/ wheezy non-free", 
            "title": "Installing Vagrant"
        }, 
        {
            "location": "/getting-started/VAGRANT_SETUP/#switch-case-vagrant-setup", 
            "text": "Install  vagrant , virtual box and get switch-case clone   git clone --recursive https://github.com/kteza1/switch-case   Download, start and ssh into box   cd switch-case/Vagrant\nvagrant up\nvagrant ssh  TROUBLESHOOT:   [x] Unable to find  /dev/ttyUSB0  when esp is plugged in.  Do  lsusb  in virtual machaing with and without esp plugged in. If don't see an extra interface when plugged in, make sure that you find usb-serial connection in your host machine when you do  VBoxManage list usbhost  and enter  product id  and  vendor id  in yml config file and do  vagrant halt  and  vagrant up .   Open virtual box app and see if multiple virtual machines are running. Stop unnecessary running virtual machines    [x] Unable to  connect  to USB serial.   Do  esp-console 115200 . If you see below message, some other resource is using the port   SerialException: device reports readiness to read but returned no data (device disconnected?)", 
            "title": "SWITCH-CASE VAGRANT SETUP"
        }, 
        {
            "location": "/getting-started/VAGRANT_SETUP/#vagrant-initial-setup", 
            "text": "NOTE: You don't need to follow these steps. These are used to create a vagrant box  CREATING  A VAGRANT ENVIRONMENT  * vagrant init ubuntu/trusty64  #creates vagrant config file\n* vagrant up                    #(downloads)boots the virtual machine. Do this where vagrant config file is present\n* vagrant ssh                                         #ssh into vagrant machine\n* vagrant halt                                        #shutdown the virtual machine\n* vagrant package --output package.box                #create a vagrant box of your env\n* vagrant box add --name kteza1/trusty64 package.box  #create virtual machine with a name from local box  BUILDING ESP-OPEN-SDK   use ubuntu/trusty64 in vagrant file  Increase ram size during installation of esp-open-sdk   config.vm.provider  virtualbox  do |v|\n    v.memory =  1024 \nend   Follow the instructions  here  plus       sudo apt-get install unzip\n\n    # This package contains usbserial kernel drivers\n    # see http://ubuntu.5.x6.nabble.com/PATCH-0-2-linux-image-extra-support-td365008.html\n    sudo apt-get -y install linux-image-extra-virtual\n\n    # Give the vagrant user permissions for the serial ports\n    sudo adduser vagrant dialout   Set RAM to \"256\" in step 2 and restart the virtal machine    TROUBLESHOOT:  Follow these only if there is a failure in build after following above steps   Add below extra repos to  /etc/apt/sources.list   if you aren't able to install every dependecy in the above step   deb http://ftp.us.debian.org/debian/ jessie main\ndeb http://ftp.us.debian.org/debian/ wheezy non-free", 
            "title": "Vagrant Initial Setup"
        }, 
        {
            "location": "/communication/connection/", 
            "text": "MQTT CONNECTION\n\n\n\n\n\n\nHow to connect local mqtt broker to wifi network ?\n\n\n\n\n\n\nHow to connect all the switch board to above local mqtt broker? Its ip will be dynamically assigned by the router.\n\n\n\n\n\n\nHow to connect client to local mqtt broker ?", 
            "title": "Mqtt connection"
        }, 
        {
            "location": "/communication/discovery_and_control/", 
            "text": "MQTT DISCOVERY\n\n\n\n\nAll the switch boards will subscribe to following topic\n\n\nswitch-case/find             ---\n //discovery request\n\n\n\n\nand publish to\n\n\nswitch-case/$MAC_ADDR/find-reply\n\n\n\n\nAll the phones will subscribe to\n\n\nswitch-case/+/find-reply     ---\n //discovery reply. (with wild card)\n\n\n\n\nmobile clients will publish to \nswitch-case/find\n with message \nhi\n. Switch board will respond with below message on topic \nswitch-case/$MAC_ADDR/find-reply\n\n\nhello \n//May be some more data in proper json. Number of devices actually connected? TBD.\n\n\n\n\n\nSince all the switch boards will subscibe to same topic \nswitch-case/find\n, all of them will receive discovery requests and since all the mobile phones subscribe with wildcard, all of them will receive discovery replys.\n\n\nCASE 1: NEW PHONE\n: With 1 publish to \nswitch-case/find\n, all the switch boards will be found\n\n\nCASE 2: NEW BOARD\n: Any 1 phone publishing to \nswitch-case/find\n, all the phones will receive the reply\n\n\nNOTES\n\n\n\n\n\n\nMobile client will add the discovered switch board to its \nknown devices\n list.\n\n\n\n\n\n\nOnly switch boards which are not added to \nknown-devices\n of the client will be visible during discovery.\n\n\n\n\n\n\nMQTT CONTROL\n\n\n\n\nIn case of control, \ncontrol request\n from a phone should be directed to a particualar switch board and \ncontrol reply\n from the switch board should be received by all the phones\n\n\nAll the boards will subscribe to its \nMAC ADDRESS\n topic. Mobile phones will know of this \nMAC\n during discovery.\n\n\nBoards subscribe to \n\n\nswitch-case/$MAC_ADDR/request\n\n\n\n\nand publish replys to \n\n\nswitch-case/$MAC_ADDR/reply\n\n\n\n\nmobile phones will subscribe to \n\n\nswitch-case/+/reply  (observe the wild card)\n\n\n\n\nNow all the mobile phones will receive the reply. Mac address in the reply topic can be used for debugging\n\n\nNOTES\n\n\n\n\nSwitch board GUI Will be highlighted only when switchboards are connected to local broker. Broker will keep note of connected switch boards\n\n\n\n\nSECURITY\n\n\nOnly clients in local network will be able to communicate with switch boards. \n\n\nTwo levels of security here.\n\n\n\n\nWifi network authentication\n\n\nMqtt broker authentication", 
            "title": "Mqtt discovery and Control"
        }
    ]
}